	LDS# $E00	; load stack pointer
LOOP: 	PSH# PROMPT_LEN	; print PROMPT prompt
	PSH# PROMPT
	JSR  $E05
	ADS# $002	; no clue what this does
	JSR  $E01	; jump to sub routine
	CMA# $002	; compare to 2
	JLE  LOOP	; LOOP if <= 2
	STA  lim	; store in lim
LOOP1: 	PSH# MD_LEN	; print MD prompt
	PSH# MD
	JSR  $E05
	ADS# $002	; ?????
	JSR  $E01	; jump to sub routine
	CMA# $000	; compare to 0
	JEQ  JUMP	; JUMP if equal
	CMA# $001	; compare to 1
	JEQ  JUMP2	; JUMP2 if equal
	JMP  LOOP1	; jump to LOOP1
JUMP: 	LDA# $004	; load 4
	STA  count	; set count to 4
	JMP  LOOP2	; jump to LOOP2
JUMP2: 	LDA# $003	; load 3
	STA  count	; set count to 3
LOOP2: 	CMA  lim	; compare count to lim
	JGT  JUMP10	; JUMP10 if greater than
	STA  op	; store count in op
	LDA# $000	; load 0
	STA  res	; store in res
	STA  shift	; store in shift
	LDA# $001	; load 1
	STA  one	; store in one
LOOP3: 	LDA  one	; load one
	SHLA		; left shift one bit
	STA  one	; store in one
	INC  shift	; increment shift
	LDA  shift	; load shift
	CMA# $016	; compare shift to 22
	JLT  LOOP3	; LOOP3 if less than //DEBUGGED TO HERE.
JUMP7:	LDA  one	; load one
	CMA  op	; compare to op
	JGT  JUMP3	; JUMP3 if greater than
JUMP4: 	CMA# $000	; compare to 0
	JEQ  DONE	; DONE: if equal
	LDA  res	; load res
	ADA  one	; add one (the variable)
	CMA  op	; compare to op
	JGE  JUMP5	; JUMP5 if >=
	LDA  res	; load res
	SHRA		; right shift one bit
	STA  res	; store res
JUMP6: 	LDA  one	; load one
	SHRA		; right shift one
	SHRA		; right shift one
	STA  one	; store one
	JMP  JUMP4	; JUMP4
JUMP3: 	SHRA		; right shift one bit
	SHRA		; right shift one bit
	STA  one	; store one
	JMP  JUMP7	; JUMP4
JUMP5: 	LDA  op	; load op
	SBA  res	; subtract res
	SBA  one	; subtract one
	STA  op	; store op
	LDA  res	; load res
	SHRA		; right shift one bit
	ADA  one	; add one
	STA  res	; store res
	JMP  JUMP6	; JUMP6
DONE: 	PSH# CT_LEN	; print CT
	PSH# CT
	JSR  $E05
	ADS# $002	; ??????
	LDA  count	; load count
	JSR  $E00
	PSH# SQRT_LEN	; print SQRT
	PSH# SQRT
	JSR  $E05
	ADS# $002	; ??????
	LDA  res	; load res
	JSR  $E00
	LDA  count	; load count
	ADA# $002	; add 2
	STA  count	; store count
	JMP  LOOP2	; LOOP2
JUMP10: 	HLT		; end

lim:	.WORD		; lim
count:	.WORD		; count
op:	.WORD		; op
res:	.WORD		; res
one:	.WORD		; one
shift:	.WORD		; shift
PROMPT:	.CHAR 'ENTER SQRT LIMIT (>2) ', PROMPT_LEN
MD:	.CHAR 'ENTER 0=EVEN 1=ODD ', MD_LEN	;
CT:	.CHAR 'COUNT = ', CT_LEN
SQRT:	.CHAR 'SQUARE ROOT = ', SQRT_LEN